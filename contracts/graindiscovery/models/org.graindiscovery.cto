/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.graindiscovery

participant SampleParticipant identified by participantId {
  o String participantId
  o String firstName
  o String lastName
}

asset SampleAsset identified by assetId {
  o String assetId
  --> SampleParticipant owner
  o String value
}

transaction SampleTransaction {
  --> SampleAsset asset
  o String newValue
}

event SampleEvent {
  --> SampleAsset asset
  o String oldValue
  o String newValue
}


/*
Two assets are defined, Grain representing a physical quantity of grain 
and also and ask if the LisitingState is set to FOR_SALE and Bid which represents
a bid for a certain quantity of grain. Bids can be filled by a specified Grain object.
For the purposes of the demo, ANY Grain object can fill a bid provided that the bidder
has sufficient balance to pay of it. Ideally checks on quality quantity etc. will be 
added in future.
*/

asset Grain identified by gid {
  o String grainType
  o String gid
  o Double value
  o ListingState state
  --> Member owner
  //Not needed for the demo
  o Double coords
  o Double grade
  o Double quantity
  o Double price
  
}



asset Grain identified by gid {
  o String grainType
  o String gid
  o Double value
  o ListingState state
  --> Member owner
  //Not needed for the demo
  o Double coords
  o Double grade
  o Double quantity
  o Double price
  
}

asset Bid identified by bid{
  o String grainType
  o String bid
  o Double value
  o ListingState state
  --> Member owner
  //Not needed for the demo
  o Double coords
  o Double grade
  o Double quantity
  o Double price
  
}

enum ListingState {
  //For Grain Object
  o FOR_SALE
  o SOLD
}

abstract participant User identified by uId {
  o String uId
  o String firstName
  o String lastName
}

participant Member extends User {
  o Double balance
}

//Grain Discovery super user, removing for the moment
//participant GrainDiscovery extends User {
//}

//Specify the Bid to be filled and the Grain to fill it with and
//the Member filling the bid 
transaction fillBid {
  --> Bid bid
  --> Grain grain
  --> Member member
}

//Specify the Grain asset to be filled and the Member to fill it
transaction fillAsk {
  --> Grain grain
  --> Member member
}



